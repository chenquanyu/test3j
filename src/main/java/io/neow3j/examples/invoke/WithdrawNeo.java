package io.neow3j.examples.invoke;

import io.neow3j.contract.ScriptHash;
import io.neow3j.crypto.transaction.*;
import io.neow3j.model.types.NEOAsset;
import io.neow3j.model.types.TransactionAttributeUsageType;
import io.neow3j.protocol.Neow3j;
import io.neow3j.protocol.core.methods.response.NeoSendRawTransaction;
import io.neow3j.protocol.exceptions.ErrorResponseException;
import io.neow3j.protocol.http.HttpService;
import io.neow3j.transaction.ContractTransaction;
import io.neow3j.utils.Numeric;
import io.neow3j.wallet.Account;
import io.neow3j.wallet.AssetTransfer;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

public class WithdrawNeo {
    public static void main(String[] args) throws IOException, ErrorResponseException {

        String url = "http://localhost:30333";

        Neow3j neow3j = Neow3j.build(new HttpService(url));

        // big-endian string
        String contractScriptString = "eb8dee66910af9f21caaf4d5d7fd33187666ff1f";
        ScriptHash contractHash = new ScriptHash(contractScriptString);

        Account contractAcct = Account.fromAddress(contractHash.toAddress()).build();
        Account acct = Account.fromWIF("L2LGkrwiNmUAnWYb1XGd5mv7v2eDf6P4F3gHyXSrNJJR4ArmBp7Q").build();
        Account owner = Account.fromWIF("KxDgvEKzgSBPPfuVfw67oPQBSjidEiqTHURKSDL1R7yGaGYAeYnr").build();

        String myAddress = owner.getAddress();

        //attributes - owner address
        List<RawTransactionAttribute> attributes = Arrays.asList(
                new RawTransactionAttribute(
                        TransactionAttributeUsageType.SCRIPT,
                        owner.getScriptHash().toArray())
        );

        //outputs
        List<RawTransactionOutput> outputs = Arrays.asList(
                //receiver
                new RawTransactionOutput(
                        NEOAsset.HASH_ID,
                        "5",
                        "AKeLhhHm4hEUfLWVBCYRNjio9xhGJAom5G")
        );

        //create contractTransactions for sending NEO or GAS
        contractAcct.updateAssetBalances(neow3j);

        AssetTransfer at = new AssetTransfer.Builder(neow3j)
                .attributes(attributes)
                .account(contractAcct)
                .outputs(outputs)
                //.networkFee(0.01)
                .build();

        ContractTransaction rawContractTx = at.getTransaction();

        // serialize the base raw transaction for signing purpose
        byte[] rawTxUnsignedArray = rawContractTx.toArrayWithoutScripts();

        // Add owner witness
        // give the invocation and verification script to the raw transaction:
        rawContractTx.addScript(RawScript.createWitness(rawTxUnsignedArray, owner.getECKeyPair()));

        // contract witness
        //rawContractTx.addScript(new RawScript(Numeric.hexStringToByteArray("00c10430323134"), Numeric.hexStringToByteArray("0140c56b6a00527ac46a51527ac41423ba2703c53263e8d6e522dc32203339dcd8eee96a52527ac40b57616665692d546f6b656e6a53527ac4034848426a54527ac4586a55527ac40800008a5d784563016a56527ac468164e656f2e53746f726167652e476574436f6e74657874616a57527ac468164e656f2e52756e74696d652e47657454726967676572616a58527ac46a58c30100876435006a52c368184e656f2e52756e74696d652e436865636b5769746e657373616a59527ac46a59c3640700516c756661006c7566616a58c30110876476026a00c3066465706c6f7987640900656a026c7566616a00c3046e616d65876409006a53c36c7566616a00c308646563696d616c73876409006a55c36c7566616a00c30673796d626f6c876409006a54c36c7566616a00c30b746f74616c537570706c79876409006a56c36c7566616a00c30962616c616e63654f66876427006a51c3c05187641a006a51c300c36a5a527ac46a57c36a5ac37c65c80c6c75666162bd01616a00c3087472616e73666572876458006a51c3c053876447006a51c300c36a5b527ac46a51c351c36a5c527ac46a51c352c36a5d527ac46a57c36a5bc36a5cc36a5dc35379517955727551727552795279547275527275651e0a6c756661006c7566625701616a00c30c7472616e7366657246726f6d876458006a51c3c053876447006a51c300c36a5b527ac46a51c351c36a5c527ac46a51c352c36a5d527ac46a57c36a5bc36a5cc36a5dc35379517955727551727552795279547275527275653b076c756661006c756662ed00616a00c307617070726f7665876458006a51c3c053876447006a51c300c36a5e527ac46a51c351c36a5f527ac46a51c352c36a5d527ac46a57c36a5ec36a5fc36a5dc353795179557275517275527952795472755272756520026c756661006c7566628800616a00c30a6d696e74546f6b656e7387643000650c036a60527ac40d6d696e74656420746f6b656e21680f4e656f2e52756e74696d652e4c6f676a60c36c7566616a00c309616c6c6f77616e6365876436006a51c3c052876428006a51c300c36a5e527ac46a51c351c36a5f527ac46a57c36a5ec36a5fc352726548016c756661006c75666111756e6b6e6f776e206f7065726174696f6e6c756661006c75665ec56b1423ba2703c53263e8d6e522dc32203339dcd8eee96a00527ac40800008a5d784563016a51527ac40a6465706c6f79696e6721680f4e656f2e52756e74696d652e4c6f676a00c368184e656f2e52756e74696d652e436865636b5769746e657373616a52527ac46a52c364890068164e656f2e53746f726167652e476574436f6e74657874616a53527ac40c57494c4c204445504c4f5921680f4e656f2e52756e74696d652e4c6f67616a53c36a00c36a51c35272680f4e656f2e53746f726167652e50757461006a00c36a51c35272087472616e7366657254c168124e656f2e52756e74696d652e4e6f74696679516c756661156f6e6c79206f776e65722063616e206465706c6f79680f4e656f2e52756e74696d652e4c6f67006c75665ac56b6a00527ac46a51527ac46a52527ac46a51c3c001149e640700006c7566616a52c3c001149e640700006c7566616a00c36a51c36a52c37e7c680f4e656f2e53746f726167652e476574616c75660116c56b6a00527ac46a51527ac46a52527ac46a53527ac46a51c3c001149e640700006c7566616a52c3c001149e640700006c7566616a51c368184e656f2e52756e74696d652e436865636b5769746e65737361630700006c7566616a53c3009f640700006c7566616a00c36a51c37c680f4e656f2e53746f726167652e476574616a53c3a26482006a51c36a52c37e6a54527ac46a53c300876422006a00c36a54c37c68124e656f2e53746f726167652e44656c65746561622100616a00c36a54c36a53c35272680f4e656f2e53746f726167652e50757461616a51c36a52c36a53c3527207617070726f766554c168124e656f2e52756e74696d652e4e6f74696679516c756661006c75660125c56b1423ba2703c53263e8d6e522dc32203339dcd8eee96a00527ac4209b7cffdaa674beae0f930ebe6085af9093e5fe56b34a5c220ccdcf6efc336fc56a51527ac40f6d696e74696e6720746f6b656e7321680f4e656f2e52756e74696d652e4c6f67682953797374656d2e457865637574696f6e456e67696e652e476574536372697074436f6e7461696e6572616a52527ac46a52c3681d4e656f2e5472616e73616374696f6e2e4765745265666572656e636573616a53527ac46a53c3c0519f6428000f6e6f206e656f206174746163686564680f4e656f2e52756e74696d652e4c6f67006c7566616a53c300c36a54527ac46a54c368184e656f2e4f75747075742e47657453637269707448617368616a55527ac4006a56527ac46a54c368154e656f2e4f75747075742e47657441737365744964616a57527ac46a57c36a51c387645d02682d53797374656d2e457865637574696f6e456e67696e652e476574457865637574696e6753637269707448617368616a58527ac4006a0114527ac46a52c3681a4e656f2e5472616e73616374696f6e2e4765744f757470757473616a0113527ac46a0113c3c06a0115527ac4616a0114c36a0115c39f64b7006a0113c36a0114c3c36a59527ac46a0114c351936a0114527ac46a59c368184e656f2e4f75747075742e47657453637269707448617368616a5a527ac40f67657474696e672073686173682e2e680f4e656f2e52756e74696d652e4c6f676a5ac36a58c387648eff0d616464696e672076616c75653f680f4e656f2e52756e74696d652e4c6f676a59c368134e656f2e4f75747075742e47657456616c7565616a5b527ac46a56c36a5bc3936a56527ac46242ff6161610c67657474696e672072617465680f4e656f2e52756e74696d652e4c6f6701646a5c527ac408676f742072617465680f4e656f2e52756e74696d652e4c6f676a56c36a5cc3956a5d527ac468164e656f2e53746f726167652e476574436f6e74657874616a5e527ac46a5ec36a55c37c680f4e656f2e53746f726167652e476574616a5f527ac46a5dc36a5fc3936a60527ac46a5ec36a55c36a60c35272680f4e656f2e53746f726167652e507574616a5ec36a00c37c680f4e656f2e53746f726167652e476574616a0111527ac46a0111c36a5dc3946a0112527ac46a5ec36a00c36a0112c35272680f4e656f2e53746f726167652e507574616a00c36a55c36a5dc35272087472616e7366657254c168124e656f2e52756e74696d652e4e6f74696679516c756661006c75660123c56b6a00527ac46a51527ac46a52527ac46a53527ac46a53c300a1640700006c7566616a51c3c001149e640700006c7566616a52c3c001149e640700006c7566616a51c36a52c37e6a54527ac46a00c36a54c37c680f4e656f2e53746f726167652e476574616a55527ac46a55c36a53c39f6434001b496e73756666696369656e742066756e647320617070726f766564680f4e656f2e52756e74696d652e4c6f67006c7566616a00c36a51c37c680f4e656f2e53746f726167652e476574616a56527ac46a56c36a53c39f643c0023496e73756666696369656e7420746f6b656e7320696e2066726f6d2062616c616e6365680f4e656f2e52756e74696d652e4c6f67006c7566616a00c36a52c37c680f4e656f2e53746f726167652e476574616a57527ac46a56c36a53c3946a58527ac46a57c36a53c3936a59527ac46a00c36a52c36a59c35272680f4e656f2e53746f726167652e507574616a00c36a51c36a58c35272680f4e656f2e53746f726167652e50757461117472616e7366657220636f6d706c657465680f4e656f2e52756e74696d652e4c6f676a55c36a53c3946a5a527ac46a5ac300876448001472656d6f76696e6720616c6c2062616c616e6365680f4e656f2e52756e74696d652e4c6f676a00c36a54c37c68124e656f2e53746f726167652e44656c6574656162560061237570646174696e6720616c6c6f77616e636520746f206e657720616c6c6f77616e6365680f4e656f2e52756e74696d652e4c6f676a00c36a54c36a5ac35272680f4e656f2e53746f726167652e50757461616a51c36a52c36a53c35272087472616e7366657254c168124e656f2e52756e74696d652e4e6f74696679516c75660123c56b6a00527ac46a51527ac46a52527ac46a53527ac46a53c300a1640700006c7566616a51c3c001149e640700006c7566616a52c3c001149e640700006c7566616a51c368184e656f2e52756e74696d652e436865636b5769746e6573736164af016a51c36a52c387642a00117472616e7366657220746f2073656c6621680f4e656f2e52756e74696d652e4c6f67516c7566616a00c36a51c37c680f4e656f2e53746f726167652e476574616a54527ac46a54c36a53c39f642b0012696e73756666696369656e742066756e6473680f4e656f2e52756e74696d652e4c6f67006c7566616a54c36a53c3876422006a00c36a51c37c68124e656f2e53746f726167652e44656c65746561625e00616a54c36a53c3946a55527ac40b646966666572656e63653a680f4e656f2e52756e74696d652e4c6f676a55c3680f4e656f2e52756e74696d652e4c6f676a00c36a51c36a55c35272680f4e656f2e53746f726167652e50757461616a00c36a52c37c680f4e656f2e53746f726167652e476574616a56527ac46a56c36a53c3936a57527ac409746f5f746f74616c3a680f4e656f2e52756e74696d652e4c6f676a57c3680f4e656f2e52756e74696d652e4c6f676a00c36a52c36a57c35272680f4e656f2e53746f726167652e507574616a51c36a52c36a53c35272087472616e7366657254c168124e656f2e52756e74696d652e4e6f74696679516c7566612166726f6d2061646472657373206973206e6f74207468652074782073656e646572680f4e656f2e52756e74696d652e4c6f67006c756657c56b6a00527ac46a51527ac46a51c3c001149e640700006c7566616a00c36a51c37c680f4e656f2e53746f726167652e476574616c75665ec56b6a00527ac46a51527ac46a51c36a00c3946a52527ac46a52c3c56a53527ac4006a54527ac46a00c36a55527ac461616a00c36a51c39f6433006a54c36a55c3936a56527ac46a56c36a53c36a54c37bc46a54c351936a54527ac46a55c36a54c3936a00527ac462c8ff6161616a53c36c7566")));

        rawContractTx.addScript(new RawScript(Numeric.hexStringToByteArray("00c10430323134"), contractHash));

        String rawTransactionHexString = Numeric.toHexStringNoPrefix(rawContractTx.toArray());
        System.out.println(rawTransactionHexString);

        NeoSendRawTransaction sendRawTransactionReq = neow3j.sendRawTransaction(rawTransactionHexString).send();

        System.out.println(sendRawTransactionReq.getResult());

    }
}
